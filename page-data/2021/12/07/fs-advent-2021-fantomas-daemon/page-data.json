{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/12/07/fs-advent-2021-fantomas-daemon/","result":{"data":{"site":{"siteMetadata":{"title":"blog.nojaf.com","author":"Florian Verdonck"}},"markdownRemark":{"id":"23c2b948-bd4e-5288-8aac-a99923a46fe4","excerpt":"Intro The F# advent calendar is a wonderful initiative that inspires the community to create new content in a short period of time.\nI’ve been fortunate enough…","html":"<h2>Intro</h2>\n<p>The F# advent calendar is a wonderful initiative that inspires the community to create new content in a short period of time.\nI’ve been fortunate enough to be part of this for some years now. This year, I had in mind to sit this one out actually.\nSometimes, there are just no new tales to tell and it is better suited to give others an opportunity.\nWhen I noticed that <a href=\"https://twitter.com/sergey_tihon/status/1459794038115155969?s=20\">Sergey still had some spots left to fill</a>, I did happily volunteer, though didn’t think it through that much.</p>\n<p>My original thought for this post was to create some content around the F# compiler.\nTo the benefits of the Fantomas project, I have been contributing <a href=\"https://github.com/dotnet/fsharp/pulls?q=is%3Apr+author%3Anojaf\">some PR’s to the compiler</a> and I wanted to elaborate a bit how a change there can simplify Fantomas.\nThis idea for a blogpost sounds reasonable, but life happens and I didn’t have this content ready at the time of writing.\nSo, instead I’d like to write about some of the recent Fantomas changes.</p>\n<h2>Pre-Daemon mode</h2>\n<p>The next version of <a href=\"https://github.com/fsprojects/fantomas/tree/4.6\">Fantomas 4.6</a> will contain an improvement in IDE integration.\nVersions 4.5 and prior were available in Ionide, Rider and the Visual Studio extensions.\nInstalling those plugins or IDE was sufficient to format code using a shortcut or action.\nDoing this would call the format function that is present in the <a href=\"https://www.nuget.org/packages/Fantomas/\">Fantomas NuGet package</a>.\nNot only will this format the current file, it would also trigger the correct logic inside the editor that the file has changed. Imagine autocomplete and other refactoring options.\n<em>And that really is a relevant integration aspect</em> that you would not get when you format the code using the commandline.</p>\n<p>The <strong>downside</strong> of this optimal <strong>integration</strong> is that you are <strong>not in control of the version that is being used in the editor</strong>.\nFantomas bugfixes happen almost on a weekly basis. I encourage people to scratch their own itch\nand many people are able to contribute after checking out the <a href=\"https://github.com/fsprojects/fantomas/blob/master/CONTRIBUTING.md\">Contribution Guidelines</a> and watching some <a href=\"https://www.youtube.com/playlist?list=PLvw_J2kfZCX3Mf6tEbIPZXbzJOD1VGl4K\">YouTube videos</a>.</p>\n<p>Solving your own bug is very rewarding and I try to publish these fixes to NuGet frequently.\nHowever, it’s important to note that having a fix on NuGet doesn’t make it available in your IDE.</p>\n<blockquote>\n<p>The stars really have to align before newer versions of Fantomas can be integrated, mainly because the version of FCS has to be in sync with what the editor has, and that can be challenging.</p>\n</blockquote>\n<p>Another downside that the IDE controlling the version of Fantomas is that you can have formatted a file yesterday and have a different result today.\nYou notice this in your source control diff and that is overall just not what you want.</p>\n<h2>Daemon mode</h2>\n<p>To move beyond this limitation, we tried to rethink how the editor integration should look like.\nWhat if you could bring your own version of Fantomas? Well, you can do this today by installing it as a local .NET tool.\nThis works, but lacks the editor integration.</p>\n<p>In 4.6 we tried to solve this problem by introducing <a href=\"https://www.nuget.org/packages/Fantomas.Client/\">Fantomas.Client</a>, a companion NuGet package for editors.\nThe client exposes a <code class=\"language-text\">FantomasService</code> that can execute the traditional format requests as found in <code class=\"language-text\">Fantomas</code>, but it proxies those to <a href=\"https://www.nuget.org/packages/fantomas-tool/\">fantomas-tool</a> instead.\nWhen formatting inside an editor, <code class=\"language-text\">Fantomas Client</code> will try and find a compatible version for the current file and spin up a daemon process of <code class=\"language-text\">fantomas-tool</code>.\nThis daemon process will act as an <a href=\"https://microsoft.github.io/language-server-protocol/\">LSP server</a> that send json messages back and forward to the <code class=\"language-text\">FantomasService</code>.\nAs user of an editor, you don’t need to worry about <code class=\"language-text\">Fantomas.Client</code>, just know that the editor will use a locally or globally installed version of <code class=\"language-text\">fantomas-tool</code>.\nMeaning, you control the version and you upgrade at your own pace.</p>\n<p>At the time of writing, there is support for VSCode (as part of the Ionide plugin).\nIf you have Ionide installed, it will prompt you to install <code class=\"language-text\">fantomas-tool</code> if no compatible version can be found.\nAfter installing, you should be good to go as demonstrated in this video:</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe src=\"https://www.youtube.com/embed/1jb6K_HZaEY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<h2>Post-Daemon mode</h2>\n<p>My hopes are that we can ship bug fixes to Fantomas at a high pace. If it gets on NuGet, it can be used in your IDE.\nEver since 4.5, I have been releasing revisions on a frequent pace and people seem to have faith in this.\nDownload numbers are significantly higher than say the first alpha of 4.4. Alpha and beta just don’t have a stable ring to it for most people.\nI completely understand this, and that is why I’d like to move forward to a model were bugfixes are considered stable and people should not fear to upgrade.</p>\n<h2>What about Rider and Visual Studio?</h2>\n<p>JetBrains has slightly different plans, although it is on their radar to support custom versions of Fantomas.\nThey won’t go with <code class=\"language-text\">Fantomas.Client</code> for technical reason as can be read in <a href=\"https://github.com/JetBrains/resharper-fsharp/issues/320\">this GitHub issue</a>.</p>\n<p>Integration of <code class=\"language-text\">Fantomas.Client</code> is ongoing for the Visual Studio extension.\nProgress can be tracked <a href=\"https://github.com/fsprojects/fantomas-for-vs/issues/21\">here</a>. Please don’t hesitate to contribute any of the remaining work.</p>\n<h2>Acknowledgements</h2>\n<p>During the development of <code class=\"language-text\">Fantomas.Client</code>, I had a lot of mentoring by <a href=\"https://github.com/baronfel\">Chet Husk</a> (the one and only <code class=\"language-text\">@baronfel</code> on GitHub).\nWe worked together on the Ionide integration in FSAutocomplete (or F-Sack as the cool kids say it).\nAnd over a timespan of several months we were able to come up with a prototype.</p>\n<p>For the Visual Studio integration I’d like to thank <a href=\"https://github.com/bddckr\">Christopher-Marcel Esser</a> and <a href=\"https://github.com/deviousasti\">Asti</a>.\nChristopher-Marcel implemented the port to <code class=\"language-text\">Fantomas.Client</code> and Asti is the core maintainer of the project.</p>\n<h2>Closing thoughts</h2>\n<p>The whole Fantomas daemon thing is pretty mind-blowing. We can upgrade to different compiler versions in a breeze.\nThis used to take months and always involved a lot of coordination. Now it happens overnight.</p>\n<p>If you have any further questions about this, you can always reach out to our <a href=\"https://gitter.im/fsprojects/fantomas\">Gitter channel</a>.</p>\n<p>Enjoy the rest of the advent calendar, happy holidays and stay safe!</p>\n<p>Cheers,</p>\n<p>Florian</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@donnehhhh?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Donovan Reeves</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a></span></p>","frontmatter":{"title":"Fantomas Daemon","date":"2021-12-07","path":"2021/12/07/fs-advent-2021-fantomas-daemon/","tags":["open-source","fsharp","fantomas","tooling"],"cover":{"publicURL":"/static/e5d8c1cba881ceba01e488a4e4dda7ac/nojaf.com.fantomas-daemon-fsadvent-2021.jpg"}}}},"pageContext":{"slug":"/fs-advent-2021-fantomas-daemon/","previous":{"fields":{"slug":"/fs-advent-2020-gitpod-snowpack-fable/"},"frontmatter":{"title":"Gitpod & Snowpack","path":"2020/12/15/fs-advent-2020-gitpod-snowpack/","tags":["open-source","fsharp","js","docker"]}},"next":{"fields":{"slug":"/a-word-on-triple-slash-comments/"},"frontmatter":{"title":"A word on triple-slash comments","path":"2022/03/05/a-word-on-triple-slash-comments/","tags":["open-source","fsharp","fantomas","tooling"]}}}},"staticQueryHashes":["3128451518","677231581"],"slicesMap":{}}