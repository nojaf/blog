{"componentChunkName":"component---src-templates-blog-post-js","path":"/2023/02/02/my-fsharp-compiler-scripts/","result":{"data":{"site":{"siteMetadata":{"title":"blog.nojaf.com","author":"Florian Verdonck"}},"markdownRemark":{"id":"0b6ba1fe-4114-529f-9c3e-a1362cd31ee2","excerpt":"Intro For the last year, I’ve been working quite extensively in the dotnet/fsharp codebase. I’ve picked up a couple of habits and created some helper scripts…","html":"<h2>Intro</h2>\n<p>For the last year, I’ve been working quite extensively in the <a href=\"https://github.com/dotnet/fsharp\">dotnet/fsharp</a> codebase.<br>\nI’ve picked up a couple of habits and created some helper scripts along the way.<br>\nThis is some stuff that works for me and it might be insightful for you. Or not.<br>\nIn this blog post, I’m going over some of my frequently used scripts.\nSome are general purpose, others are very specific to the F# compiler codebase.</p>\n<h2>PowerShell profile</h2>\n<p>I’ve always been a Windows guy and thus <code class=\"language-text\">pwsh</code> is my go-to. <small>(<code class=\"language-text\">pwsh</code> is cross-platform though)</small>\nHaving multiple terminal windows open is the norm and I frequently add (or alias) functions in my <a href=\"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.3\">$PROFILE</a>.<br>\nI’ll go over some of my frequently used functions in my <code class=\"language-text\">$PROFILE</code>, in no particular order.</p>\n<h2>Copy current location</h2>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> <span class=\"token function\">Copy-CurrentLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$pwd</span><span class=\"token punctuation\">.</span>Path <span class=\"token punctuation\">|</span> clip\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Set-Alias</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"ccp\"</span> <span class=\"token operator\">-</span>Value <span class=\"token function\">Copy-CurrentLocation</span></code></pre></div>\n<p>This copied the current location of your terminal session to your clipboard.</p>\n<h2>Remove recursively and forced</h2>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> <span class=\"token function\">Remove-ForceRecurse</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Remove-Item</span> <span class=\"token variable\">$path</span> <span class=\"token operator\">-</span>Recurse <span class=\"token operator\">-</span>Force\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Set-Alias</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"rmf\"</span> <span class=\"token operator\">-</span>Value <span class=\"token function\">Remove-ForceRecurse</span></code></pre></div>\n<p>Self-explanatory, I use this a lot.</p>\n<h2>Sync git fork</h2>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> <span class=\"token function\">Sync-Master</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    git checkout master\n    git fetch upstream\n    git rebase upstream/master\n    git push\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Sync-Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    git checkout main\n    git fetch upstream\n    git rebase upstream/main\n    git push\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is based on the <a href=\"https://github.com/dotnet/fsharp/blob/main/DEVGUIDE.md#updating-your-fork\">Updating your fork</a> section from the F# dev guide.</p>\n<h2>Format changed</h2>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> <span class=\"token function\">Format-Changed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$root</span> = git rev-parse <span class=\"token operator\">--</span><span class=\"token function\">show-toplevel</span>\n    <span class=\"token function\">Push-Location</span> <span class=\"token variable\">$root</span>\n    <span class=\"token variable\">$files</span> = git status <span class=\"token operator\">--</span>porcelain <span class=\"token punctuation\">|</span> <span class=\"token function\">Where-Object</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>StartsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\" M\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-or</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>StartsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"AM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-and</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Test-FSharpExtension</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">ForEach-Object</span> <span class=\"token punctuation\">{</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    &amp; <span class=\"token string\">\"dotnet\"</span> <span class=\"token string\">\"fantomas\"</span> <span class=\"token variable\">$files</span>\n    <span class=\"token function\">Pop-Location</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Format the files you have touched in a git repository with the local Fantomas installation.</p>\n<h2>Surface area</h2>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> Surface-Area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$env</span>:TEST_UPDATE_BSL=1 \n    dotnet test tests/FSharp<span class=\"token punctuation\">.</span>Compiler<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">.</span>Tests/FSharp<span class=\"token punctuation\">.</span>Compiler<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">.</span>Tests<span class=\"token punctuation\">.</span>fsproj <span class=\"token operator\">--</span><span class=\"token keyword\">filter</span> <span class=\"token string\">\"SurfaceAreaTest\"</span>\n    dotnet test tests/FSharp<span class=\"token punctuation\">.</span>Compiler<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">.</span>Tests/FSharp<span class=\"token punctuation\">.</span>Compiler<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">.</span>Tests<span class=\"token punctuation\">.</span>fsproj <span class=\"token operator\">--</span><span class=\"token keyword\">filter</span> <span class=\"token string\">\"SurfaceAreaTest\"</span>\n    dotnet test tests/FSharp<span class=\"token punctuation\">.</span>Compiler<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">.</span>Tests/FSharp<span class=\"token punctuation\">.</span>Compiler<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">.</span>Tests<span class=\"token punctuation\">.</span>fsproj <span class=\"token operator\">--</span><span class=\"token keyword\">filter</span> <span class=\"token string\">\"SurfaceAreaTest\"</span> <span class=\"token operator\">-</span>c Release\n    dotnet test tests/FSharp<span class=\"token punctuation\">.</span>Compiler<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">.</span>Tests/FSharp<span class=\"token punctuation\">.</span>Compiler<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">.</span>Tests<span class=\"token punctuation\">.</span>fsproj <span class=\"token operator\">--</span><span class=\"token keyword\">filter</span> <span class=\"token string\">\"SurfaceAreaTest\"</span> <span class=\"token operator\">-</span>c Release\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When you change certain bits in the <code class=\"language-text\">FSharp.Compiler.Service</code> project, you can break the public API of the binary.<br>\nFor me, this happens frequently when I touch <code class=\"language-text\">SyntaxTree.fsi</code>.<br>\nIt is a pain to update the baseline, so I wrapped it into a function that can be called at the repository root.</p>\n<h2>Kill dotnet</h2>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> <span class=\"token function\">Kill</span><span class=\"token operator\">-</span>DotNet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Get-Process</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"dotnet\"</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Kill</span>\n    <span class=\"token function\">Get-Process</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"msbuild\"</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Kill</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The F# compiler build scripts can potentially create some <code class=\"language-text\">dotnet</code> or <code class=\"language-text\">msbuild</code> ghost processes. This can lock certain <code class=\"language-text\">dll</code> files and can interrupt a <code class=\"language-text\">git clean -xdf</code>.\nWhen I had enough of that, I just <code class=\"language-text\">Kill-DotNet</code>.</p>\n<h2>Watch tools</h2>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> <span class=\"token function\">Watch-Tools</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Push-Location</span> <span class=\"token string\">\"C:\\Users\\nojaf\\Projects\\fantomas-tools\"</span>\n    &amp; dotnet fsi build<span class=\"token punctuation\">.</span>fsx <span class=\"token operator\">-</span>p <span class=\"token string\">\"Fantomas-Git\"</span>\n    &amp; dotnet fsi build<span class=\"token punctuation\">.</span>fsx <span class=\"token operator\">-</span>p <span class=\"token string\">\"Watch\"</span>\n    <span class=\"token function\">Pop-Location</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I use <a href=\"https://fsprojects.github.io/fantomas-tools/#/\">Fantomas Tools</a> a lot. You can view the untyped <code class=\"language-text\">AST</code> in one of the tabs, which is quite useful.</p>\n<h2><code class=\"language-text\">ls</code> but with full paths</h2>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> <span class=\"token function\">Get-ChildItemFullPath</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Get-ChildItem</span> <span class=\"token variable\">$path</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Select-Object</span> <span class=\"token operator\">-</span>ExpandProperty FullName\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Set-Alias</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"lsf\"</span> <span class=\"token operator\">-</span>Value <span class=\"token function\">Get-ChildItemFullPath</span></code></pre></div>\n<p>Instead of <code class=\"language-text\">ls my-dir</code>, use <code class=\"language-text\">lsf my-dir</code> and I get the full paths.</p>\n<h2>Ready to run the local compiler</h2>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> ReadyToRun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    &amp; dotnet publish <span class=\"token punctuation\">.</span>\\src\\fsc\\fscProject\\fsc<span class=\"token punctuation\">.</span>fsproj <span class=\"token operator\">-</span>c Release <span class=\"token operator\">-</span>r win-x64 <span class=\"token operator\">-</span>p:PublishReadyToRun=true <span class=\"token operator\">-</span>f net7<span class=\"token punctuation\">.</span>0 <span class=\"token operator\">--</span>no-self-contained\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will create the <code class=\"language-text\">fsc.exe</code> as it will be shipped with the dotnet SDK. Execute in the repository root.<br>\nIt also creates <code class=\"language-text\">fsc.dll</code>, which you can plug into your local <code class=\"language-text\">fsproj</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- local compiler, picked up by MSBuild --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DotnetFscCompilerPath</span><span class=\"token punctuation\">></span></span>C:\\Users\\nojaf\\Projects\\fsharp\\artifacts\\bin\\fsc\\Release\\net7.0\\win-x64\\fsc.dll<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DotnetFscCompilerPath</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>typically combined with some specific compiler flags, these can be set by:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DotnetFscCompilerPath</span><span class=\"token punctuation\">></span></span>C:\\Users\\nojaf\\Projects\\fsharp\\artifacts\\bin\\fsc\\Release\\net7.0\\win-x64\\fsc.dll<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DotnetFscCompilerPath</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- Special flags, that could only be relevant to my local compiler --></span>\n    <span class=\"token comment\">&lt;!-- Checkout https://github.com/dotnet/fsharp/pull/14494 to learn more about parallel type-checking in compilation --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OtherFlags</span><span class=\"token punctuation\">></span></span>--test:GraphBasedChecking --test:DumpCheckingGraph --deterministic-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OtherFlags</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Create F# compiler arguments</h2>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">function</span> Get<span class=\"token operator\">-</span><span class=\"token function\">ArgsFile</span><span class=\"token punctuation\">(</span>$project<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">&amp;</span> dotnet fsi <span class=\"token string\">\"C:\\Users\\nojaf\\Projects\\scripts\\fsharp\\args-file.fsx\"</span> $project\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sometimes you want to just run <code class=\"language-text\">fsc.exe</code> for an existing project. The <code class=\"language-text\">Get-ArgsFile</code> function will invoke an <code class=\"language-text\">F#</code> script that will scrape the arguments from an existing <code class=\"language-text\">dotnet build</code> run.</p>\n<p><code class=\"language-text\">args-file.fsx</code> looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token preprocessor property\">#r </span><span class=\"token string\">\"nuget: CliWrap, 3.6.0\"</span>\n<span class=\"token preprocessor property\">#r </span><span class=\"token string\">\"nuget: MSBuild.StructuredLogger, 2.1.746\"</span>\n\n<span class=\"token keyword\">open</span> System<span class=\"token punctuation\">.</span>IO\n<span class=\"token keyword\">open</span> Microsoft<span class=\"token punctuation\">.</span>Build<span class=\"token punctuation\">.</span>Logging<span class=\"token punctuation\">.</span>StructuredLogger\n<span class=\"token keyword\">open</span> CliWrap\n\n<span class=\"token comment\">/// Create a text file with the F# compiler arguments scrapped from a binary log file.</span>\n<span class=\"token comment\">/// Run `dotnet build --no-incremental -bl` to create the binlog file.</span>\n<span class=\"token comment\">/// The --no-incremental flag is essential for this scraping code.</span>\n<span class=\"token keyword\">let</span> mkCompilerArgsFromBinLog file <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">let</span> build <span class=\"token operator\">=</span> BinaryLog<span class=\"token punctuation\">.</span>ReadBuild file\n\n    <span class=\"token keyword\">let</span> projectName <span class=\"token operator\">=</span>\n        build<span class=\"token punctuation\">.</span>Children\n        <span class=\"token operator\">|></span> Seq<span class=\"token punctuation\">.</span>choose <span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">function</span>\n            <span class=\"token operator\">|</span> <span class=\"token operator\">:?</span> Project <span class=\"token keyword\">as</span> p <span class=\"token operator\">-></span> Some p<span class=\"token punctuation\">.</span>Name\n            <span class=\"token operator\">|</span> _ <span class=\"token operator\">-></span> None\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|></span> Seq<span class=\"token punctuation\">.</span>distinct\n        <span class=\"token operator\">|></span> Seq<span class=\"token punctuation\">.</span>exactlyOne\n\n    <span class=\"token keyword\">let</span> message <span class=\"token punctuation\">(</span>fscTask<span class=\"token punctuation\">:</span> <span class=\"token class-name\">FscTask</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        fscTask<span class=\"token punctuation\">.</span>Children\n        <span class=\"token operator\">|></span> Seq<span class=\"token punctuation\">.</span>tryPick <span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">function</span>\n            <span class=\"token operator\">|</span> <span class=\"token operator\">:?</span> Message <span class=\"token keyword\">as</span> m <span class=\"token keyword\">when</span> m<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Contains <span class=\"token string\">\"fsc\"</span> <span class=\"token operator\">-></span> Some m<span class=\"token punctuation\">.</span>Text\n            <span class=\"token operator\">|</span> _ <span class=\"token operator\">-></span> None\n        <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mutable</span> args <span class=\"token operator\">=</span> None\n\n    build<span class=\"token punctuation\">.</span>VisitAllChildren<span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> task <span class=\"token operator\">-></span>\n        <span class=\"token keyword\">match</span> task <span class=\"token keyword\">with</span>\n        <span class=\"token operator\">|</span> <span class=\"token operator\">:?</span> FscTask <span class=\"token keyword\">as</span> fscTask <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">match</span> fscTask<span class=\"token punctuation\">.</span>Parent<span class=\"token punctuation\">.</span>Parent <span class=\"token keyword\">with</span>\n            <span class=\"token operator\">|</span> <span class=\"token operator\">:?</span> Project <span class=\"token keyword\">as</span> p <span class=\"token keyword\">when</span> p<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> projectName <span class=\"token operator\">-></span> args <span class=\"token operator\">&lt;-</span> message fscTask\n            <span class=\"token operator\">|</span> _ <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|</span> _ <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">match</span> args <span class=\"token keyword\">with</span>\n    <span class=\"token operator\">|</span> None <span class=\"token operator\">-></span> printfn <span class=\"token string\">\"Could not process the binlog file. Did you build using '--no-incremental'?\"</span>\n    <span class=\"token operator\">|</span> Some args <span class=\"token operator\">-></span>\n        <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>IndexOf <span class=\"token string\">\"-o:\"</span>\n            args<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">let</span> directory <span class=\"token operator\">=</span> <span class=\"token function\">FileInfo</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Directory<span class=\"token punctuation\">.</span>FullName\n\n        <span class=\"token keyword\">let</span> argsPath <span class=\"token operator\">=</span>\n            Path<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">,</span> $<span class=\"token string\">\"{Path.GetFileNameWithoutExtension(projectName)}.args.txt\"</span><span class=\"token punctuation\">)</span>\n\n        File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span>argsPath<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n        printfn <span class=\"token string\">\"Wrote %s\"</span> argsPath\n\n<span class=\"token keyword\">let</span> project <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span>last fsi<span class=\"token punctuation\">.</span>CommandLineArgs\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span>Exists project<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n    failwithf <span class=\"token string\">\"%s does not exist\"</span> project\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">.</span><span class=\"token function\">EndsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".fsproj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n    failwithf <span class=\"token string\">\"%s is not an fsharp project file\"</span> project\n\nCli\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Wrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dotnet\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithArguments</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"build {project} -bl --no-incremental\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> binLogFile <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span><span class=\"token function\">FileInfo</span><span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>DirectoryName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"msbuild.binlog\"</span><span class=\"token punctuation\">)</span>\n\nmkCompilerArgsFromBinLog binLogFile</code></pre></div>\n<p>The main gist is that you build your project and create a <code class=\"language-text\">msbinlog</code> file. Open that file and look for the <code class=\"language-text\">fsc</code> arguments.</p>\n<p>Once you have an <code class=\"language-text\">MyProject-args.txt</code> file you can pass it to your local <code class=\"language-text\">fsc.exe</code> invocation:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># Create arguments file</span>\n<span class=\"token function\">Get-ArgsFile</span> <span class=\"token punctuation\">.</span>\\Fantomas<span class=\"token punctuation\">.</span>Core<span class=\"token punctuation\">.</span>fsproj\n\n<span class=\"token comment\"># In PowerShell, mind the `&amp;`</span>\n&amp; <span class=\"token string\">\"C:\\Users\\nojaf\\Projects\\fsharp\\artifacts\\bin\\fsc\\Release\\net7.0\\win-x64\\publish\\fsc.exe\"</span> <span class=\"token string\">\"@./Fantomas.Core.args.txt\"</span> <span class=\"token operator\">--</span>times</code></pre></div>\n<p>Also notice that you need to put an <code class=\"language-text\">@</code> character before the path to your <code class=\"language-text\">args.txt</code> file. (Otherwise, the compiler doesn’t pick this up)<br>\n<code class=\"language-text\">--times</code> is an additional argument that shows you more timings of each phase in the compilation:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Microsoft (R) F# Compiler version 12.5.0.0 for F# 7.0\nCopyright (c) Microsoft Corporation. All Rights Reserved.\n--------------------------------------------------------------------------------------------------------\n|Phase name                          |Elapsed |Duration| WS(MB)|  GC0  |  GC1  |  GC2  |Handles|Threads|\n|------------------------------------|--------|--------|-------|-------|-------|-------|-------|-------|\n\nwarning FS0075: The command-line option 'times' is for test purposes only\n|Import mscorlib+FSharp.Core         |  0.1732|  0.1350|    129|      0|      0|      0|    268|     28|\n|Parse inputs                        |  0.2423|  0.0624|    167|      0|      0|      0|    349|     49|\n|Import non-system references        |  0.2691|  0.0227|    192|      0|      0|      0|    349|     49|\n|Typecheck                           |  1.4108|  1.1378|    814|      2|      1|      1|    411|     69|\n|Typechecked                         |  1.4151|  0.0003|    814|      0|      0|      0|    411|     69|\n|Write Interface File                |  1.4186|  0.0000|    814|      0|      0|      0|    411|     69|\n|Write XML doc signatures            |  1.4239|  0.0019|    814|      0|      0|      0|    411|     69|\n|Write XML docs                      |  1.4294|  0.0021|    814|      0|      0|      0|    411|     69|\n|Encode Interface Data               |  1.4857|  0.0528|    842|      0|      0|      0|    412|     69|\n|Optimizations                       |  1.7403|  0.2507|   1010|      0|      0|      0|    550|     69|\n|Ending Optimizations                |  1.7444|  0.0000|   1010|      0|      0|      0|    550|     69|\n|Encoding OptData                    |  1.7543|  0.0063|   1011|      0|      0|      0|    550|     69|\n|TAST -> IL                          |  2.3593|  0.6014|   1343|      0|      0|      0|    552|     69|\n|>Write Started                      |  2.3677|  0.0031|   1345|      0|      0|      0|    554|     69|\n|>Module Generation Preparation      |  2.3738|  0.0021|   1346|      0|      0|      0|    554|     69|\n|>Module Generation Pass 1           |  2.3945|  0.0172|   1354|      0|      0|      0|    554|     69|\n|>Module Generation Pass 2           |  2.4642|  0.0659|   1398|      0|      0|      0|    554|     69|\n|>Module Generation Pass 3           |  2.4720|  0.0039|   1399|      0|      0|      0|    554|     69|\n|>Module Generation Pass 4           |  2.4768|  0.0013|   1400|      0|      0|      0|    554|     69|\n|>Finalize Module Generation Results |  2.4814|  0.0003|   1400|      0|      0|      0|    554|     69|\n|>Generated Tables and Code          |  2.4874|  0.0025|   1400|      0|      0|      0|    554|     69|\n|>Layout Header of Tables            |  2.4909|  0.0001|   1400|      0|      0|      0|    554|     69|\n|>Build String/Blob Address Tables   |  2.5071|  0.0114|   1405|      0|      0|      0|    554|     69|\n|>Sort Tables                        |  2.5118|  0.0000|   1405|      0|      0|      0|    554|     69|\n|>Write Header of tablebuf           |  2.5193|  0.0038|   1407|      0|      0|      0|    554|     69|\n|>Write Tables to tablebuf           |  2.5229|  0.0000|   1407|      0|      0|      0|    554|     69|\n|>Layout Metadata                    |  2.5267|  0.0000|   1407|      0|      0|      0|    554|     69|\n|>Write Metadata Header              |  2.5302|  0.0001|   1407|      0|      0|      0|    554|     69|\n|>Write Metadata Tables              |  2.5336|  0.0001|   1407|      0|      0|      0|    554|     69|\n|>Write Metadata Strings             |  2.5369|  0.0000|   1407|      0|      0|      0|    554|     69|\n|>Write Metadata User Strings        |  2.5406|  0.0002|   1407|      0|      0|      0|    554|     69|\n|>Write Blob Stream                  |  2.5450|  0.0010|   1408|      0|      0|      0|    554|     69|\n|>Fixup Metadata                     |  2.5487|  0.0002|   1408|      0|      0|      0|    554|     69|\n|>Generated IL and metadata          |  2.5536|  0.0016|   1408|      0|      0|      0|    554|     69|\n|>Layout image                       |  2.5616|  0.0040|   1409|      0|      0|      0|    555|     69|\n|>Writing Image                      |  2.5663|  0.0010|   1409|      0|      0|      0|    554|     69|\n|>Signing Image                      |  2.5697|  0.0000|   1409|      0|      0|      0|    554|     69|\n|>Write Started                      |  2.5746|  0.0004|   1410|      0|      0|      0|    555|     69|\n|>Module Generation Preparation      |  2.5798|  0.0018|   1411|      0|      0|      0|    555|     69|\n|>Module Generation Pass 1           |  2.5963|  0.0131|   1417|      0|      0|      0|    555|     69|\n|>Module Generation Pass 2           |  2.7748|  0.1748|   1528|      0|      0|      0|    555|     69|\n|>Module Generation Pass 3           |  2.7818|  0.0028|   1529|      0|      0|      0|    555|     69|\n|>Module Generation Pass 4           |  2.7867|  0.0014|   1530|      0|      0|      0|    555|     69|\n|>Finalize Module Generation Results |  2.7910|  0.0001|   1531|      0|      0|      0|    555|     69|\n|>Generated Tables and Code          |  2.7947|  0.0002|   1531|      0|      0|      0|    555|     69|\n|>Layout Header of Tables            |  2.7983|  0.0001|   1531|      0|      0|      0|    555|     69|\n|>Build String/Blob Address Tables   |  2.8131|  0.0115|   1535|      0|      0|      0|    555|     69|\n|>Sort Tables                        |  2.8169|  0.0000|   1535|      0|      0|      0|    555|     69|\n|>Write Header of tablebuf           |  2.8244|  0.0039|   1536|      0|      0|      0|    555|     69|\n|>Write Tables to tablebuf           |  2.8281|  0.0000|   1536|      0|      0|      0|    555|     69|\n|>Layout Metadata                    |  2.8319|  0.0000|   1536|      0|      0|      0|    555|     69|\n|>Write Metadata Header              |  2.8353|  0.0001|   1536|      0|      0|      0|    555|     69|\n|>Write Metadata Tables              |  2.8397|  0.0001|   1536|      0|      0|      0|    555|     69|\n|>Write Metadata Strings             |  2.8431|  0.0000|   1536|      0|      0|      0|    555|     69|\n|>Write Metadata User Strings        |  2.8470|  0.0006|   1537|      0|      0|      0|    555|     69|\n|>Write Blob Stream                  |  2.8515|  0.0012|   1538|      0|      0|      0|    555|     69|\n|>Fixup Metadata                     |  2.8556|  0.0000|   1539|      0|      0|      0|    555|     69|\n|>Generated IL and metadata          |  2.8718|  0.0130|   1540|      0|      0|      0|    555|     69|\n|>PDB: Defined 31 documents          |  2.8809|  0.0053|   1540|      0|      0|      0|    555|     69|\n|>PDB: Sorted 9932 methods           |  2.9174|  0.0312|   1550|      0|      0|      0|    555|     69|\n|>PDB: Created                       |  2.9288|  0.0076|   1550|      0|      0|      0|    555|     69|\n|>Layout image                       |  2.9344|  0.0015|   1551|      0|      0|      0|    555|     69|\n|>Writing Image                      |  2.9382|  0.0003|   1551|      0|      0|      0|    554|     69|\n|>Generate PDB Info                  |  2.9422|  0.0005|   1551|      0|      0|      0|    555|     69|\n|>Finalize PDB                       |  2.9455|  0.0000|   1551|      0|      0|      0|    555|     69|\n|>Signing Image                      |  2.9495|  0.0002|   1551|      0|      0|      0|    554|     69|\n|Write .NET Binary                   |  2.9529|  0.5896|   1551|      0|      0|      0|    554|     69|\n--------------------------------------------------------------------------------------------------------</code></pre></div>\n<h2>Get the mvid</h2>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">function</span> Get<span class=\"token operator\">-</span><span class=\"token function\">Mvid</span><span class=\"token punctuation\">(</span>$dll<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">&amp;</span> dotnet fsi <span class=\"token string\">\"C:\\Users\\nojaf\\Projects\\scripts\\fsharp\\mvid-reader.fsx\"</span> $dll\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When working with <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/assembly/reference-assemblies\">reference assemblies</a>, it is useful to inspect the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.module.moduleversionid?view=net-7.0\">mvid</a> of a binary.</p>\n<p><code class=\"language-text\">mvid-reader.fsx</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token preprocessor property\">#r </span><span class=\"token string\">\"nuget: System.Reflection.Metadata\"</span>\n\n<span class=\"token keyword\">open</span> System\n<span class=\"token keyword\">open</span> System<span class=\"token punctuation\">.</span>IO\n<span class=\"token keyword\">open</span> System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">.</span>Metadata\n<span class=\"token keyword\">open</span> System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">.</span>PortableExecutable\n\n<span class=\"token keyword\">let</span> getMvid refDll <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">use</span> embeddedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PEReader</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span>OpenRead refDll<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> sourceReader <span class=\"token operator\">=</span> embeddedReader<span class=\"token punctuation\">.</span><span class=\"token function\">GetMetadataReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> loc <span class=\"token operator\">=</span> sourceReader<span class=\"token punctuation\">.</span><span class=\"token function\">GetModuleDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Mvid\n    <span class=\"token keyword\">let</span> mvid <span class=\"token operator\">=</span> sourceReader<span class=\"token punctuation\">.</span><span class=\"token function\">GetGuid</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span>\n    printfn <span class=\"token string\">\"%s at %s\"</span> <span class=\"token punctuation\">(</span>mvid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">let</span> dll <span class=\"token punctuation\">:</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span>last fsi<span class=\"token punctuation\">.</span>CommandLineArgs\n\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>dll<span class=\"token punctuation\">.</span><span class=\"token function\">EndsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n    failwithf <span class=\"token string\">\"Expected %s to have .dll extension\"</span> dll\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span>Exists dll<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n    failwithf <span class=\"token string\">\"%s does not exist on disk\"</span> dll\n\ngetMvid dll</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Get-Mvid</span> <span class=\"token punctuation\">.</span>\\bin\\Debug\\netstandard2<span class=\"token punctuation\">.</span>0\\Fantomas<span class=\"token punctuation\">.</span>Core<span class=\"token punctuation\">.</span>dll\n4e838868-adae-c4d5-445f-480b444a96f7 at 2/2/2023 12:00:56 PM</code></pre></div>\n<h2>Closing thoughts</h2>\n<p>Again, all this stuff works for me, it might not be for you.<br>\nI felt like sharing, that’s all folks.</p>\n<p>Until next time,</p>\n<p>Florian</p>\n<p><small>Photo by <a href=\"https://unsplash.com/@jpprommel?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jack Prommel</a> on <a href=\"https://unsplash.com/photos/kaJiXMCyi20?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a></small></p>","frontmatter":{"title":"My F# compiler scripts","date":"2023-02-02","path":"2023/02/02/my-fsharp-compiler-scripts/","tags":["open-source","fsharp","tooling"],"cover":{"publicURL":"/static/2d7656c019d9d89d8b4eb19fcab845a9/blog.nojaf.com-my-fsharp-compiler-scripts.jpg"}}}},"pageContext":{"slug":"/my-fsharp-compiler-scripts/","previous":{"fields":{"slug":"/the-oak-sleeps-in-the-acorn/"},"frontmatter":{"title":"The oak sleeps in the acorn","path":"2022/12/22/the-oak-sleeps-in-the-acorn/","tags":["open-source","fsharp","fantomas","tooling"]}},"next":null}},"staticQueryHashes":["3128451518","677231581"],"slicesMap":{}}