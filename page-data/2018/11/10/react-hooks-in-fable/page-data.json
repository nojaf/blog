{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/11/10/react-hooks-in-fable/","result":{"data":{"site":{"siteMetadata":{"title":"blog.nojaf.com","author":"Florian Verdonck"}},"markdownRemark":{"id":"b78aede6-2afa-5524-961f-a3e8dbba2ce0","excerpt":"Introduction A couple of weeks ago Facebook presented React hooks, a new way of accessing React features inside functional components. In this blogpost I wouldâ€¦","html":"<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>A couple of weeks ago Facebook presented <a href=\"https://reactjs.org/docs/hooks-overview.html\">React hooks</a>, a new way of accessing React features inside functional components.</p>\n<p>In this blogpost I would like to show that the new hooks can easily be used in combination with <a href=\"https://fable.io\">Fable</a>.</p>\n<p><strong>Disclaimer:</strong> Hooks are an experimental proposal to React, currently available in <code class=\"language-text\">16.7 alpha</code>, and the api is not final yet. Use at your own risk.</p>\n<h2 id=\"usestate\" style=\"position:relative;\"><a href=\"#usestate\" aria-label=\"usestate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState()</h2>\n<p>A first example of a hook is <a href=\"https://reactjs.org/docs/hooks-state.html\">useState()</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">SetState</span><span class=\"token operator\">&lt;</span>'t<span class=\"token operator\">></span> <span class=\"token operator\">=</span> 't <span class=\"token operator\">-></span> unit  \n<span class=\"token keyword\">let</span> useState<span class=\"token operator\">&lt;</span>'t<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> 't<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>'t <span class=\"token operator\">*</span> SetState<span class=\"token operator\">&lt;</span>'t<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> import <span class=\"token string\">\"useState\"</span> <span class=\"token string\">\"react\"</span></code></pre></div>\n<p>When the <code class=\"language-text\">useState</code> hook is called, we receive a variable representing the state and a function to update the state.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nojaf\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Note that <code class=\"language-text\">useState</code> accepts a default value for the state.</p>\n<p>To demonstrate this hook, we will create a todo list application.</p>\n<h3 id=\"custom-useinputvalue-hook\" style=\"position:relative;\"><a href=\"#custom-useinputvalue-hook\" aria-label=\"custom useinputvalue hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>custom useInputValue hook</h3>\n<p><code class=\"language-text\">useState</code> can also be used as a building block to create our own hook:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">let</span> useInputValue <span class=\"token punctuation\">(</span>initialValue <span class=\"token punctuation\">:</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  \n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> useState <span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> onChange <span class=\"token punctuation\">(</span>e <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Fable<span class=\"token punctuation\">.</span>Import<span class=\"token punctuation\">.</span>React<span class=\"token punctuation\">.</span>FormEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">let</span> value <span class=\"token punctuation\">:</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token operator\">?</span>value\n        setValue <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token function\">resetValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> setValue <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span>\n\n    value<span class=\"token punctuation\">,</span> onChange<span class=\"token punctuation\">,</span> resetValue</code></pre></div>\n<p><code class=\"language-text\">useInputValue</code> provides an easy way to capture text from an input field.</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">FormProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> OnSubmit <span class=\"token punctuation\">:</span> <span class=\"token class-name\">string <span class=\"token operator\">-></span> unit</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> formComponent <span class=\"token punctuation\">(</span>props <span class=\"token punctuation\">:</span> <span class=\"token class-name\">FormProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  \n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> onChange<span class=\"token punctuation\">,</span> resetValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> useInputValue <span class=\"token string\">\"\"</span>\n\n    <span class=\"token keyword\">let</span> onSubmit <span class=\"token punctuation\">(</span>ev <span class=\"token punctuation\">:</span> <span class=\"token class-name\">FormEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        ev<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">OnSubmit</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">resetValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    form <span class=\"token punctuation\">[</span> OnSubmit onSubmit<span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>\n        input <span class=\"token punctuation\">[</span> Value value<span class=\"token punctuation\">;</span> OnChange onChange<span class=\"token punctuation\">;</span> Placeholder <span class=\"token string\">\"Enter todo\"</span><span class=\"token punctuation\">;</span> ClassName <span class=\"token string\">\"input\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">formComponent</code> is an ideal <em>dumb component</em> to which we can add our todo from our <em>smart component</em>.</p>\n<h3 id=\"top-level-component\" style=\"position:relative;\"><a href=\"#top-level-component\" aria-label=\"top level component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Top level component</h3>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">let</span> <span class=\"token function\">appComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  \n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>Todo list<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> toggleComplete i <span class=\"token operator\">=</span>\n        todos\n        <span class=\"token operator\">|></span> List<span class=\"token punctuation\">.</span>mapi <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> k todo <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">if</span> k <span class=\"token operator\">=</span> i <span class=\"token keyword\">then</span> <span class=\"token punctuation\">{</span> todo <span class=\"token keyword\">with</span> Complete <span class=\"token operator\">=</span> <span class=\"token keyword\">not</span> todo<span class=\"token punctuation\">.</span>Complete <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> todo\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|></span> setTodos\n\n    <span class=\"token keyword\">let</span> renderTodos <span class=\"token operator\">=</span>\n        todos\n        <span class=\"token operator\">|></span> List<span class=\"token punctuation\">.</span>mapi <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> idx todo <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">let</span> style <span class=\"token operator\">=</span>\n                CSSProp<span class=\"token punctuation\">.</span><span class=\"token function\">TextDecoration</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> todo<span class=\"token punctuation\">.</span>Complete <span class=\"token keyword\">then</span> <span class=\"token string\">\"line-through\"</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">|></span> List<span class=\"token punctuation\">.</span>singleton\n\n            <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> sprintf <span class=\"token string\">\"todo_%i\"</span> idx\n\n            div <span class=\"token punctuation\">[</span> Key key<span class=\"token punctuation\">;</span> <span class=\"token function\">OnClick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> _ <span class=\"token operator\">-></span> toggleComplete idx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>\n                label <span class=\"token punctuation\">[</span>ClassName <span class=\"token string\">\"checkbox\"</span><span class=\"token punctuation\">;</span> Style style<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>\n                    input <span class=\"token punctuation\">[</span>Type <span class=\"token string\">\"checkbox\"</span><span class=\"token punctuation\">;</span> Checked todo<span class=\"token punctuation\">.</span>Complete<span class=\"token punctuation\">;</span> <span class=\"token function\">OnChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> _ <span class=\"token operator\">-></span>  toggleComplete idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                    str todo<span class=\"token punctuation\">.</span>Text\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> onSubmit text <span class=\"token operator\">=</span>\n            <span class=\"token punctuation\">{</span> Text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span> Complete <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">|></span> List<span class=\"token punctuation\">.</span>singleton\n            <span class=\"token operator\">|></span> <span class=\"token punctuation\">(</span>@<span class=\"token punctuation\">)</span> todos\n            <span class=\"token operator\">|></span> setTodos\n\n    div <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>\n        h1 <span class=\"token punctuation\">[</span> Class <span class=\"token string\">\"title is-4\"</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> str <span class=\"token string\">\"Todos\"</span> <span class=\"token punctuation\">]</span>\n        ofFunction <span class=\"token computation-expression keyword\">formComponent</span> <span class=\"token punctuation\">{</span> OnSubmit <span class=\"token operator\">=</span> onSubmit <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        div <span class=\"token punctuation\">[</span>ClassName <span class=\"token string\">\"notification\"</span><span class=\"token punctuation\">]</span> renderTodos\n    <span class=\"token punctuation\">]</span></code></pre></div>\n<p>Notice how we can use hooks at multiple levels and <strong>how well this works together with F#</strong>.</p>\n<h2 id=\"usereducer\" style=\"position:relative;\"><a href=\"#usereducer\" aria-label=\"usereducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useReducer()</h2>\n<p>The next hook we will explorer is <a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\">useReducer()</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReduceFn</span><span class=\"token operator\">&lt;</span>'state<span class=\"token punctuation\">,</span>'msg<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>'state <span class=\"token operator\">-></span> 'msg <span class=\"token operator\">-></span> 'state<span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Dispatch</span><span class=\"token operator\">&lt;</span>'msg<span class=\"token operator\">></span> <span class=\"token operator\">=</span>'msg <span class=\"token operator\">-></span> unit  \n<span class=\"token keyword\">let</span> useReducer<span class=\"token operator\">&lt;</span>'state<span class=\"token punctuation\">,</span>'msg<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ReduceFn</span><span class=\"token operator\">&lt;</span>'state<span class=\"token punctuation\">,</span>'msg<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">:</span>'state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>'state <span class=\"token operator\">*</span> Dispatch<span class=\"token operator\">&lt;</span>'msg<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=</span> import <span class=\"token string\">\"useReducer\"</span> <span class=\"token string\">\"react\"</span></code></pre></div>\n<p>This has an extremely Elm/Redux/Elmish vibe to it, so letâ€™s build the mandatory counter example. The code is so self-explanatory that you should instantly see where this is going.</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Msg</span> <span class=\"token operator\">=</span>  \n    <span class=\"token operator\">|</span> Increase\n    <span class=\"token operator\">|</span> Decrease\n    <span class=\"token operator\">|</span> Reset\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Model</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> Value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> intialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> Value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> update model msg <span class=\"token operator\">=</span>  \n    <span class=\"token keyword\">match</span> msg <span class=\"token keyword\">with</span>\n    <span class=\"token operator\">|</span> Increase <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> model <span class=\"token keyword\">with</span> Value <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">|</span> Decrease <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> model <span class=\"token keyword\">with</span> Value <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">|</span> Reset <span class=\"token operator\">-></span> intialState\n\n<span class=\"token keyword\">let</span> reducerComponent <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  \n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> useReducer update intialState\n\n    div <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>\n        button <span class=\"token punctuation\">[</span>ClassName <span class=\"token string\">\"button\"</span><span class=\"token punctuation\">;</span> OnClick <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> _ <span class=\"token operator\">-></span> dispatch Increase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>str <span class=\"token string\">\"Increase\"</span><span class=\"token punctuation\">]</span>\n        button <span class=\"token punctuation\">[</span>ClassName <span class=\"token string\">\"button\"</span><span class=\"token punctuation\">;</span> OnClick <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> _ <span class=\"token operator\">-></span> dispatch Decrease<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>str <span class=\"token string\">\"Decrease\"</span><span class=\"token punctuation\">]</span>\n        button <span class=\"token punctuation\">[</span>ClassName <span class=\"token string\">\"button\"</span><span class=\"token punctuation\">;</span> OnClick <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> _ <span class=\"token operator\">-></span> dispatch Reset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>str <span class=\"token string\">\"Reset\"</span><span class=\"token punctuation\">]</span>\n        p <span class=\"token punctuation\">[</span>ClassName <span class=\"token string\">\"title is-2 has-text-centered\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>sprintf <span class=\"token string\">\"%i\"</span> model<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">|></span> str<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span></code></pre></div>\n<p>And there you have it. I believe this will be a nice alternative to Elmish if you are building something small.</p>\n<h2 id=\"useeffect\" style=\"position:relative;\"><a href=\"#useeffect\" aria-label=\"useeffect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useEffect()</h2>\n<p>Lastly, a demo on <a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\">useEffect()</a>, think of it as a way to launch side effects when a component renders.</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">let</span> useEffect <span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>unit <span class=\"token operator\">-></span> U2<span class=\"token operator\">&lt;</span>unit<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>unit <span class=\"token operator\">-></span> unit<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>dependsOn<span class=\"token punctuation\">:</span> <span class=\"token class-name\">obj</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> unit <span class=\"token operator\">=</span> import <span class=\"token string\">\"useEffect\"</span> <span class=\"token string\">\"react\"</span></code></pre></div>\n<p>We would like to download a list of github repositories of a selected user/organization.</p>\n<p>For the download itself we use <code class=\"language-text\">fetch</code> from <a href=\"http://fable.io/fable-powerpack/\">Fable.PowerPack</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">let</span> githubUsers <span class=\"token operator\">=</span>  \n        <span class=\"token punctuation\">[</span> <span class=\"token string\">\"fable-compiler\"</span><span class=\"token punctuation\">;</span> <span class=\"token string\">\"fsprojects\"</span><span class=\"token punctuation\">;</span> <span class=\"token string\">\"nojaf\"</span> <span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> decodeRepoItem <span class=\"token operator\">=</span>  \n    Decode<span class=\"token punctuation\">.</span>field <span class=\"token string\">\"name\"</span> Decode<span class=\"token punctuation\">.</span>string\n\n<span class=\"token keyword\">let</span> decodeResonse <span class=\"token operator\">=</span> Decode<span class=\"token punctuation\">.</span>array decodeRepoItem\n\n<span class=\"token keyword\">let</span> loadRepos updateRepos user <span class=\"token operator\">=</span>  \n    <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> sprintf <span class=\"token string\">\"https://api.github.com/users/%s/repos\"</span> user\n    Fetch<span class=\"token punctuation\">.</span>fetch url <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">|></span> Promise<span class=\"token punctuation\">.</span>bind <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> res <span class=\"token operator\">-></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Promise<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> json <span class=\"token operator\">-></span> Decode<span class=\"token punctuation\">.</span>fromString decodeResonse json<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|></span> Promise<span class=\"token punctuation\">.</span>mapResult updateRepos\n    <span class=\"token operator\">|></span> ignore</code></pre></div>\n<p>This code will execute the <code class=\"language-text\">updateRepos</code> function when the download was successful and the decoding of the json worked out.</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">let</span> <span class=\"token function\">effectComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  \n    <span class=\"token keyword\">let</span> options <span class=\"token operator\">=</span>\n        githubUsers\n        <span class=\"token operator\">|></span> List<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> name <span class=\"token operator\">-></span>\n            option <span class=\"token punctuation\">[</span> Value name<span class=\"token punctuation\">;</span> Key name <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> str name <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|></span> <span class=\"token punctuation\">(</span>@<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">.</span>singleton <span class=\"token punctuation\">(</span>option <span class=\"token punctuation\">[</span>Value <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> Key <span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>selectedOrg<span class=\"token punctuation\">,</span> setOrganisation<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> useState <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>repos<span class=\"token punctuation\">,</span> setRepos<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> onChange <span class=\"token punctuation\">(</span>ev <span class=\"token punctuation\">:</span> <span class=\"token class-name\">FormEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> setOrganisation <span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n\n    useEffect <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n        <span class=\"token keyword\">match</span> System<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrWhiteSpace</span><span class=\"token punctuation\">(</span>selectedOrg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">with</span>\n        <span class=\"token operator\">|</span> <span class=\"token keyword\">true</span> <span class=\"token operator\">-></span> setRepos Array<span class=\"token punctuation\">.</span>empty\n        <span class=\"token operator\">|</span> <span class=\"token keyword\">false</span> <span class=\"token operator\">-></span> loadRepos setRepos selectedOrg\n        <span class=\"token operator\">|></span> U2<span class=\"token punctuation\">.</span>Case1\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">|</span> selectedOrg <span class=\"token operator\">|</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">let</span> repoListItems <span class=\"token operator\">=</span>\n        repos\n        <span class=\"token operator\">|></span> Array<span class=\"token punctuation\">.</span>sortWith <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> a b <span class=\"token operator\">-></span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span> System<span class=\"token punctuation\">.</span>StringComparison<span class=\"token punctuation\">.</span>OrdinalIgnoreCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|></span> Array<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> r <span class=\"token operator\">-></span> li <span class=\"token punctuation\">[</span>Key r<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>str r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    div <span class=\"token punctuation\">[</span>ClassName <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>\n        div <span class=\"token punctuation\">[</span>ClassName <span class=\"token string\">\"select\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">select</span> <span class=\"token punctuation\">[</span> Value selectedOrg<span class=\"token punctuation\">;</span> OnChange onChange <span class=\"token punctuation\">]</span> options\n        <span class=\"token punctuation\">]</span>\n        ul <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> repoListItems\n    <span class=\"token punctuation\">]</span></code></pre></div>\n<p>Let us take a closer look to the <code class=\"language-text\">useEffect</code> code:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\">useEffect <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n    <span class=\"token keyword\">match</span> System<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrWhiteSpace</span><span class=\"token punctuation\">(</span>selectedOrg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">with</span>\n    <span class=\"token operator\">|</span> <span class=\"token keyword\">true</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span> <span class=\"token keyword\">false</span> <span class=\"token operator\">-></span> loadRepos setRepos selectedOrg\n    <span class=\"token operator\">|></span> U2<span class=\"token punctuation\">.</span>Case1\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">|</span> selectedOrg <span class=\"token operator\">|</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>The first argument of <code class=\"language-text\">useEffect</code> takes a function that returns <code class=\"language-text\">unit</code> or a <code class=\"language-text\">new function that returns unit</code>. The latter can be used to clean up the effect, if for example we were to wire some event handlers.</p>\n<p>That array we pass as second argument with the value of <code class=\"language-text\">selectedOrg</code>, serves to tell the hook that we only need to re-evaluate when that value changes.</p>\n<h2 id=\"the-source\" style=\"position:relative;\"><a href=\"#the-source\" aria-label=\"the source permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Source</h2>\n<p>All samples can be found on <a href=\"https://github.com/nojaf/fable-react-hooks-sample\">github</a>, or you can try them <a href=\"https://nojaf.github.io/fable-react-hooks-sample/#\">online</a>.</p>\n<h2 id=\"remarks\" style=\"position:relative;\"><a href=\"#remarks\" aria-label=\"remarks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remarks</h2>\n<ul>\n<li>I liked how easy it was to create bindings for hooks. Fable clearly is a match for this.</li>\n<li>Hooks work really well for small application. I believe they might also shine in larger applications. To be investigated.</li>\n<li>You need React <code class=\"language-text\">16.7.0-alpha.0</code> to play with hooks.</li>\n<li>If you are using webpack, hot module reloading and hooks donâ€™t mix at the time of writing.</li>\n</ul>\n<h2 id=\"final-words\" style=\"position:relative;\"><a href=\"#final-words\" aria-label=\"final words permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final words</h2>\n<p>I hope you enjoyed this blogpost and it all makes sense to you. If you have any suggestions or questions, please leave a comment.</p>\n<p>Yours truly,<br>\nnojaf</p>\n<p>Photo by <a style=\"background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px\" href=\"https://unsplash.com/@ravenwolfab?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Download free do whatever you want high-resolution photos from Alan Bishop\"><span style=\"display:inline-block;padding:2px 3px\"><svg xmlns=\"http://www.w3.org/2000/svg\" style=\"height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white\" viewBox=\"0 0 32 32\"><title>unsplash-logo</title><path d=\"M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z\"></path></svg></span><span style=\"display:inline-block;padding:2px 3px\">Alan Bishop</span></a></p>","frontmatter":{"title":"React hooks preview with Fable","date":"2018-11-10","path":"2018/11/10/react-hooks-in-fable/","tags":["javascript","fable","fp","fsharp","react"],"cover":{"publicURL":"/static/52e9072b98598ab9a0f303ef49cddcd1/nojaf-fable-react-hooks.jpg"},"backgroundPosition":null}}},"pageContext":{"slug":"/react-hooks-fable/","previous":{"fields":{"slug":"/fantomas-2-8/"},"frontmatter":{"title":"Fantomas 2.8: global .NET Core cli tool!","path":"2018/07/07/fantomas-global-cli-tool/","tags":["open-source","fsharp"]}},"next":{"fields":{"slug":"/vscode-extension-with-fable/"},"frontmatter":{"title":"Writing a VSCode extension with Fable 2.1","path":"2018/12/17/writing-a-vscode-extension-with-fable-2-1/","tags":["javascript","fable","fp","fsharp"]}}}},"staticQueryHashes":["3128451518","677231581"],"slicesMap":{}}