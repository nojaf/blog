{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/01/20/building-fable-apps-inside-a-docker-container/","result":{"data":{"site":{"siteMetadata":{"title":"blog.nojaf.com","author":"Florian Verdonck"}},"markdownRemark":{"id":"df601566-64a5-5b41-8269-ac67652251c0","excerpt":"Introduction Want to use Docker to develop Fable applications? What if I told you it isn’t all that difficult? TLDR; How to user Docker with Fable. Docker So…","html":"<h2>Introduction</h2>\n<p>Want to use Docker to develop Fable applications? What if I told you it isn’t all that difficult?</p>\n<blockquote>\n<p>TLDR; How to user Docker with Fable.</p>\n</blockquote>\n<h2>Docker</h2>\n<p>So the first step with Docker images is that you check whether a suiting image that fits your needs already exists.<br>\nWhen I checked Docker Hub for any recent images with the Fable tool chain I didn’t really find anything that works with <em>Fable 1.x</em>.</p>\n<p>I accepted the fact that I would have to create the image myself.<br>\nIf you check the <a href=\"http://fable.io/docs/getting-started.html#requirements\">docs</a> for requirements, we’ll need:</p>\n<ul>\n<li><a href=\"https://www.microsoft.com/net\">.NET Core</a></li>\n<li><a href=\"https://nodejs.org/en/\">Node js</a></li>\n<li><a href=\"http://www.mono-project.com\">Mono</a></li>\n</ul>\n<h3>Docker compose approach</h3>\n<p>At first I thought that I would need two containers. One with Mono to restore the dependencies with <a href=\"https://fsprojects.github.io/Paket/\">paket</a> and the other to start the Fable daemon and compile the F# code.</p>\n<p>The Mono image exists but I could find one where both .NET Core and Node js were installed.<br>\nI tried to create an image starting from <a href=\"https://hub.docker.com/r/microsoft/dotnet/\">microsoft/dotnet</a> and add Node to it.<br>\nWell that quickly <a href=\"https://github.com/nodejs/docker-node/issues/600\">backfired</a> and I tried the other way around: starting from the <a href=\"https://github.com/nodejs/docker-node/blob/df8782dfddf8c70663f0a7d19942120b1d6977a5/9/Dockerfile\">Node image</a> and installing .NET Core. Victory was mine and I create a <a href=\"https://docs.docker.com/compose/\">Docker compose file</a> with both containers listed.</p>\n<p>To keep our head in the game, let’s call the Mono container the <strong>MC</strong> and the .NET/Node container <strong>NNC</strong>.</p>\n<p><code class=\"language-text\">docker-compose up</code></p>\n<blockquote>\n<p>Creating two containers linked in a network</p>\n</blockquote>\n<p>Now I was able to create a new Fable app using <code class=\"language-text\">dotnet new fable</code>. (I already installed the templates in the <strong>NNC</strong> image). Next up was using the <strong>MC</strong> to restore the packages. Then you <code class=\"language-text\">cd src</code> into the source folder and hit <code class=\"language-text\">dotnet restore</code>. This will make sure the <em>fsproj</em> finds the dlls stored by paket, I guess. To be completely honest <em>paket</em> is still a mystery to me half the times.</p>\n<p>And that was the point where <strong>the docker compose plan hit a wall</strong>. You see <code class=\"language-text\">dotnet restore</code> calls paket, and paket needs <em>Mono</em> to run in the first place. Because paket doesn’t yet run on .NET Core.</p>\n<p>So the conclusion was that I need one image that contains everything.</p>\n<h3>nojaf/Fable</h3>\n<p>With the previous problems kept in mind it wasn’t all that hard to create the image.<br>\nStart from <strong>Node</strong>, add <strong>.NET Core</strong> and finish up by installing <strong>Mono</strong>.<br>\nYou can find the image on <a href=\"https://hub.docker.com/r/nojaf/fable/\">Docker Hub</a> or on <a href=\"https://github.com/nojaf/fable-docker/blob/master/Dockerfile\">Github</a>.</p>\n<h2>Building a new app</h2>\n<h3>New project</h3>\n<p>Create a new folder first. I’m currently on Windows and using Powershell, the steps are very similar on other operating systems.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">PS</span> C:\\Users\\nojaf\\Projects> mkdir my-<span class=\"token function\">new-fable</span><span class=\"token operator\">-</span>app  \n<span class=\"token function\">PS</span> C:\\Users\\nojaf\\Projects> cd my-<span class=\"token function\">new-fable</span><span class=\"token operator\">-</span>app</code></pre></div>\n<p>Run the Docker image, map port <code class=\"language-text\">8080</code> and add the current folder as a volume.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">PS</span> C:\\Users\\nojaf\\Projects\\my-<span class=\"token function\">new-fable</span><span class=\"token operator\">-</span>app> <span class=\"token variable\">$path</span> = <span class=\"token string\">\"<span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token function\">pwd</span><span class=\"token punctuation\">)</span></span>\"</span><span class=\"token punctuation\">.</span>Replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/c/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token function\">PS</span> C:\\Users\\nojaf\\Projects\\my-<span class=\"token function\">new-fable</span><span class=\"token operator\">-</span>app> docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span><span class=\"token function\">rm</span> <span class=\"token operator\">-</span>v <span class=\"token string\">\"${path}:/usr/src/app\"</span> <span class=\"token operator\">-</span>w <span class=\"token string\">\"/usr/src/app\"</span> <span class=\"token operator\">-</span>p 8080:8080 nojaf/fable bash</code></pre></div>\n<p>Once inside the container you can just create project with <code class=\"language-text\">dotnet new fable</code>.<br>\nThe <a href=\"https://github.com/fable-compiler/fable-templates/tree/master/simple/Content\">Fable Simple Template</a> and the <a href=\"https://github.com/fable-elmish/templates\">Elmish template</a> are already installed in this image.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@7e9435460a64:/usr/src/app<span class=\"token comment\"># dotnet new fable -lang F#</span></code></pre></div>\n<h3>Restore the packages</h3>\n<p>At this point you can perfectly follow the steps writing in the Fable docs.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@7e9435460a64:/usr/src/app<span class=\"token comment\"># mono .paket/paket.exe install  </span>\nroot@7e9435460a64:/usr/src/app<span class=\"token comment\"># npm i  </span>\nroot@7e9435460a64:/usr/src/app<span class=\"token comment\"># cd src  </span>\nroot@7e9435460a64:/usr/src/app/src<span class=\"token comment\"># dotnet restore</span></code></pre></div>\n<p>If you want to use <a href=\"https://yarnpkg.com/en/\">yarn</a> instead of npm that’s fine, it is also included in the image.</p>\n<h3>Running the app</h3>\n<p>All we need to do is start the Fable daemon to compile the code. Although this will work, we will need some tweaking to the <em>webpack</em> config.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root@7e9435460a64:/usr/src/app/src# dotnet fable npm-start  </code></pre></div>\n<p>If you browse to <em><a href=\"http://localhost:8080\">http://localhost:8080</a></em> you wouldn’t be able to connect. But why? Didn’t we map the ports in Docker when we ran the <code class=\"language-text\">run</code> command? Yeah, we did, but Docker can’t figure out how to map <em>localhost:8080</em> to our desktop. It can figure out <strong><a href=\"http://0.0.0.0:8080\">http://0.0.0.0:8080</a></strong> though.</p>\n<p>So we’ll need to change the webpack config <a href=\"https://webpack.js.org/configuration/dev-server/#devserver-host\">devServer host setting</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">contentBase</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0.0\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>Ow yeah, we now see our Fable app in our browser.</p>\n<p>Lastly, we want our browser to reload when we make changes to our source files.<br>\nBecause we make the changes outside the container, the file change events aren’t picked up inside the container.<br>\nLuckily, we can configure webpack to <a href=\"https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-\">poll our files</a> to detect changes.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">contentBase</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">watchOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">poll</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p><img src=\"http://www.sharegif.com/wp-content/uploads/2013/10/yeah-baby-gif-joey-friends.gif\" alt=\"Joey approves\"></p>\n<p>And now we’ve hit the sweet spot. Happy coding ya’all.</p>\n<h2>Remarks</h2>\n<ul>\n<li>I often get warnings in the container saying <code class=\"language-text\">perl : warning : Setting locale failed.</code>. If anyone knows how to deal with those I’m all ears.</li>\n<li>You still need to install F# to get a decent tooling experience, regardless which editor you use.</li>\n<li>Don’t hesitate to make <a href=\"https://github.com/nojaf/fable-docker/issues\">an issue on Github</a> if you encounter any problems.</li>\n</ul>\n<h2>Final words</h2>\n<p>I hope you enjoyed this blogpost and it all makes sense. If you have any suggestions or questions please leave a comment.</p>\n<p>Yours truly,<br>\nnojaf</p>","frontmatter":{"title":"Building Fable apps inside a Docker container","date":"2018-01-20","path":"2018/01/20/building-fable-apps-inside-a-docker-container/","tags":["fable","docker","fsharp"],"cover":{"publicURL":"/static/74022e03bf74ea00b91ec4a1ef384c5d/nojaf-fable-docker.jpg"}}}},"pageContext":{"slug":"/fable-docker/","previous":{"fields":{"slug":"/adventures-in-elm/"},"frontmatter":{"title":"Adventures in Elm","path":"2016/11/28/adventures-in-elm/","tags":["javascript","elm","fp"]}},"next":{"fields":{"slug":"/fantomas-rejuvenated/"},"frontmatter":{"title":"Fantomas rejuvenated: .NET cli tool","path":"2018/05/03/fantomas-rejuvenated/","tags":["fable","docker","fsharp"]}}}},"staticQueryHashes":["3128451518","677231581"],"slicesMap":{}}