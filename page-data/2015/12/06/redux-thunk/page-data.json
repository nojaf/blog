{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015/12/06/redux-thunk/","result":{"data":{"site":{"siteMetadata":{"title":"blog.nojaf.com","author":"Florian Verdonck"}},"markdownRemark":{"id":"8b4c67be-f588-5f77-b2bc-a8bed192734e","excerpt":"Introduction Lately I’ve been using a lot of Reactjs goodness in my side projects. React is only the V in a modern day MVW (Model, View Whatever) pattern and…","html":"<h2>Introduction</h2>\n<p>Lately I’ve been using a lot of Reactjs goodness in my side projects. React is only the V in a modern day MVW (Model, View Whatever) pattern and that’s an interesting subject. Facebook uses its own <a href=\"https://facebook.github.io/flux/\">Flux</a> library/pattern/architecture to cope with the other stuff, however there seem to be a lot of different opinions when it’s comes to flux.</p>\n<p>One of those flux variants is Redux, created by Dan Abramov and others. If you never heard of Redux or don’t really know how it works, I suggest you <a href=\"https://egghead.io/series/getting-started-with-redux\">watch these videos first</a>. In this blogpost I’ll explain a way of dealing with async operations using <a href=\"https://github.com/gaearon/redux-thunk\">Redux Thunk</a>.</p>\n<h2>Explaining the problem</h2>\n<p>The main reason why we can’t use async is due to the way a reducer function works. The concept of a reducer is that it takes the current state and an action and it returns the next state. It’s a pure function that does not modify the current state.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousState<span class=\"token punctuation\">,</span> someAction</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">var</span> nextState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span>previousState<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span>someAction<span class=\"token punctuation\">.</span>bar\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If would we want to do some async stuff we would have to wait until a Promise is resolved and then return the next state. We could just return the previous state and dispatch a new action once our Promise is resolved.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousState<span class=\"token punctuation\">,</span> someAction</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  \n    <span class=\"token function\">someAsyncMethod</span><span class=\"token punctuation\">(</span>someAction<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            myStore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"SOME_TYPE\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span>result<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> previousState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a bad approach because we can have side effects here.<br>\nThe function is no longer pure. <em>What if the Promise is rejected?</em><br>\nIt’s also not allowed by the Redux store if you look at the <a href=\"https://github.com/rackt/redux/blob/master/src/createStore.js#L116\">source code</a>.</p>\n<h2>Enter middleware</h2>\n<p>Middleware is magical concept created by ancient elves riding unicorns. No not really, although I have to admit that it does seem a bit overwhelming at first. The essence of middleware is that it runs in the Store before the action is dispatched to the reducer. You can read <a href=\"http://redux.js.org/docs/advanced/Middleware.html\">the docs</a> for the long version.</p>\n<blockquote>\n<p>It provides a third-party extension point between dispatching an action, and the moment it reaches the reducer.</p>\n<p><em>Redux docs</em></p>\n</blockquote>\n<p>The Thunk middleware looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">thunkMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> getState <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span>\n      <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Although this is a bit hard to read, let me put that in ES5 for a moment</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">thunkMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">store</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So next is actually the next piece of middleware. The last piece of middleware should call <em>next</em> otherwise the action never gets dispatched to the root reducer. <a href=\"https://jsfiddle.net/6Lwte98g/\">Example</a></p>\n<p>So basically the Thunk middleware stops the chain when the action is a function.<br>\nIn the source of Thunk, the outcome of the action function gets returned but the value is most likely to be a Promise so I don’t think that it is necessary to return the value of <code class=\"language-text\">action(store.dispatch, store.getState)</code>.</p>\n<h2>A full example</h2>\n<p>Enough with the theory, let’s create an actual example.<br>\nWe’ll create a little app that fetches github repositories from a user.</p>\n<h3>The application state</h3>\n<p>When creating a Redux application I always find it helpful to have an idea of the application state. We need to store the username, the repositories and a flag whether we are loading the repos or not.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"user\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"nojaf\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"repos\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"isLoading\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Actions and Action creators</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addReposAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">jsonResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ADD_TWEETS\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">repos</span><span class=\"token operator\">:</span> jsonResult\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">userChangedAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"USER_CHANGED\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> value\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadingChangedAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isLoading</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"IS_LOADING\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> isLoading\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first three action creators are easy to understand, they return an action, the end. As we saw in the code of Thunk the action can also be a function.<br>\nSo our action creator that eventually does some async code should return a function.</p>\n<p><strong>Wait, wait, wait. An action creator that returns a function??!?</strong> How is that even an action creator? Well it isn’t really but it isn’t a reducer either, it’s a function that returns a function. So instead of debating on semantics let’s look at the code.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// returns a function and will be called in the Redux-Thunk middleware</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadReposAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">,</span> getState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.github.com/users/\"</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>user <span class=\"token operator\">+</span> <span class=\"token string\">\"/repos\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadingChangedAction</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadingChangedAction</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">throw</span> <span class=\"token string\">\"request failed\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">jsonResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addReposAction</span><span class=\"token punctuation\">(</span>jsonResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sweetAlert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops...\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Couldn't fetch repos for user: \"</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So the clue with the <code class=\"language-text\">loadReposAction</code> function is that we can do async stuff and then dispatch when we have something. Each dispatch call will run synchronously and update the application state. Whether we return the Promise of the fetch function doesn’t really matter.</p>\n<h3>The reducer</h3>\n<p>Nothing special here:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">initialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">repos</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rootReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">var</span> previousState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">?</span> state <span class=\"token operator\">:</span> <span class=\"token function\">initialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ADD_TWEETS\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">addTweets</span><span class=\"token punctuation\">(</span>previousState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"USER_CHANGED\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">userChanged</span><span class=\"token punctuation\">(</span>previousState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"IS_LOADING\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">isLoadingChanged</span><span class=\"token punctuation\">(</span>previousState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> previousState<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Wiring up the Store</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> createStoreWithMiddleware <span class=\"token operator\">=</span> Redux<span class=\"token punctuation\">.</span><span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunkMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Redux<span class=\"token punctuation\">.</span>createStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStoreWithMiddleware</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Dispatching</h3>\n<p>So in order to bootstrap the application we’ll have to dispatch some actions to get things going.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">userChangedAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nojaf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token comment\">// this will update the state to have a username</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadReposAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token comment\">// Thunk will execute the return value of loadReposAction</span></code></pre></div>\n<h2>To Thunk or not to Thunk?</h2>\n<p>So using the Thunk middleware we can execute async stuff. We briefly saw how middleware works and we most likely scratched our heads. Couldn’t we just call the <code class=\"language-text\">loadReposAction</code> directly and pass down the store?</p>\n<p>Something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadReposAction2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">store</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.github.com/users/\"</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>user <span class=\"token operator\">+</span> <span class=\"token string\">\"/repos\"</span><span class=\"token punctuation\">;</span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadingChangedAction</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadingChangedAction</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">throw</span> <span class=\"token string\">\"request failed\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">jsonResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addReposAction</span><span class=\"token punctuation\">(</span>jsonResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sweetAlert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops...\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Couldn't fetch repos for user: \"</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And just call <code class=\"language-text\">loadReposAction2(myStore);</code>???</p>\n<p>Well turns out we can and none of this was really necessary. It seems like a good idea to keep the flow consistent and use the dispatcher for all actions. In the end it’s personal choice I think.</p>\n<h2>The Source</h2>\n<p>I’ve created a <a href=\"//jsfiddle.net/8y8e427g/13/\">jsfiddle</a> with the result.</p>\n<h2>Remarks</h2>\n<ul>\n<li>Writing this blogpost really taught me how to use Redux Thunk, once you get it, it’s actually quite easy.</li>\n<li>Middleware on the other hand can still be a bit confusing from time to time.</li>\n<li>Please correct me if you find any mistakes.</li>\n</ul>\n<h2>Final words</h2>\n<p>I hope you enjoyed this blogpost and it all makes sense. If you have any suggestions or questions please leave a comment.</p>\n<p>Yours truly,<br>\nnojaf</p>","frontmatter":{"title":"Redux Thunk, javascript middleware for Redux","date":"2015-12-06","path":"2015/12/06/redux-thunk/","tags":["javascript"],"cover":{"publicURL":"/static/a719368399274398375ae418e2a3b5b0/nojaf-com-redux-thunk-banner.jpg"}}}},"pageContext":{"slug":"/redux-thunk/","previous":null,"next":{"fields":{"slug":"/leap-rxjs/"},"frontmatter":{"title":"A leap in RxJS","path":"2016/03/24/a-leap-in-rx-js/","tags":["javascript","rxjs"]}}}},"staticQueryHashes":["3128451518","677231581"],"slicesMap":{}}